import requests

try:
    response = requests.get('http://127.0.0.1:5000/logistica/api/monitoramento/dados', timeout=5)
    data = response.json()
    
    if data.get('data'):
        # Filtrar apenas tipologia 3/4
        dados_filtrados = [item for item in data['data'] if item.get('Tipologia') == '3/4']
        
        print(f"üìä Total de registros com tipologia 3/4: {len(dados_filtrados)}")
        
        # Simular normaliza√ß√£o (mesma l√≥gica do JavaScript)
        def normalizar_nome_cidade(cidade):
            if not cidade or cidade.strip() == '':
                return ''
            
            correcoes = {
                'S√É¬£o': 'S√£o',
                'S√É¬°o': 'S√£o', 
                'Taubat√É¬©': 'Taubat√©',
                'Ca√É¬ßapava': 'Ca√ßapava',
                'S√É¬£o Jos√É¬© dos Campos': 'S√£o Jos√© dos Campos',
                'S√É¬£o Paulo': 'S√£o Paulo',
                'S√É¬£o Sebastiao': 'S√£o Sebasti√£o',
                'S√É¬£o Joao da Boa Vista': 'S√£o Jo√£o da Boa Vista',
                'S√É¬£o Joaquim da Barra': 'S√£o Joaquim da Barra'
            }
            
            cidade_normalizada = cidade.strip()
            
            # Aplicar corre√ß√µes de encoding
            for errado, correto in correcoes.items():
                cidade_normalizada = cidade_normalizada.replace(errado, correto)
            
            # Capitaliza√ß√£o padronizada
            preposicoes = ['de', 'da', 'das', 'do', 'dos', 'e']
            palavras = cidade_normalizada.lower().split(' ')
            palavras_capitalizadas = []
            
            for palavra in palavras:
                if palavra in preposicoes:
                    palavras_capitalizadas.append(palavra)
                else:
                    palavras_capitalizadas.append(palavra.capitalize())
            
            return ' '.join(palavras_capitalizadas)
        
        # Aplicar normaliza√ß√£o
        cidades_antes = [item.get('Cidade', '').strip() for item in dados_filtrados if item.get('Cidade', '').strip()]
        cidades_normalizadas = [normalizar_nome_cidade(cidade) for cidade in cidades_antes if cidade]
        
        cidades_unicas_antes = set(cidades_antes)
        cidades_unicas_depois = set(cidades_normalizadas)
        
        print(f"\nüèôÔ∏è ANTES da normaliza√ß√£o: {len(cidades_unicas_antes)} cidades √∫nicas")
        print(f"üèôÔ∏è DEPOIS da normaliza√ß√£o: {len(cidades_unicas_depois)} cidades √∫nicas")
        print(f"‚úÖ Redu√ß√£o: {len(cidades_unicas_antes) - len(cidades_unicas_depois)} duplicatas eliminadas")
        
        print(f"\nüìã Cidades normalizadas (ordenadas):")
        for i, cidade in enumerate(sorted(cidades_unicas_depois), 1):
            count = cidades_normalizadas.count(cidade)
            print(f"  {i:2d}. {cidade}: {count} registros")
        
        # Verificar quantas t√™m coordenadas agora
        coordenadas_cidades = {
            'S√ÉO PAULO', 'TAUBAT√â', 'RIO DE JANEIRO', 'BELO HORIZONTE', 'BRAS√çLIA', 
            'SALVADOR', 'FORTALEZA', 'RECIFE', 'PORTO ALEGRE', 'CURITIBA', 
            'CAMPINAS', 'SANTOS', 'S√ÉO JOS√â DOS CAMPOS', 'SOROCABA', 'RIBEIR√ÉO PRETO',
            'S√ÉO BERNARDO DO CAMPO', 'GUARULHOS', 'OSASCO', 'S√ÉO CAETANO DO SUL',
            'DIADEMA', 'MAU√Å', 'SUZANO', 'JACARE√ç', 'CA√áAPAVA', 'S√ÉO SEBASTI√ÉO',
            'CARAGUATATUBA', 'UBATUBA', 'GUARATINGUET√Å', 'APARECIDA', 'LORENA',
            'CACHOEIRA PAULISTA', 'CRUZEIRO', 'QUELUZ', 'LAVRINHAS', 'S√ÉO LUIZ DO PARAITINGA',
            'AGUAI', 'CANAS', 'FRANCA', 'GUAR√Å', 'ITAQUAQUECETUBA', 'ITUVERAVA',
            'LAGOINHA', 'PINDAMONHANGABA', 'PERU√çBE', 'PIQUETE', 'ROSEIRA',
            'SANTA ISABEL', 'SANTO ANT√îNIO DE POSSE', 'SOCORRO', 
            'S√ÉO JO√ÉO DA BOA VISTA', 'S√ÉO JOAQUIM DA BARRA', 'VARGEM'
        }
        
        cidades_com_coordenadas = 0
        cidades_sem_coordenadas = []
        
        for cidade in cidades_unicas_depois:
            cidade_upper = cidade.upper()
            if cidade_upper in coordenadas_cidades:
                cidades_com_coordenadas += 1
            else:
                cidades_sem_coordenadas.append(cidade)
        
        print(f"\nüó∫Ô∏è Cidades com coordenadas: {cidades_com_coordenadas}")
        print(f"‚ùå Cidades ainda sem coordenadas: {len(cidades_sem_coordenadas)}")
        
        if cidades_sem_coordenadas:
            print("\nCidades que ainda precisam de coordenadas:")
            for cidade in sorted(cidades_sem_coordenadas):
                count = cidades_normalizadas.count(cidade)
                print(f"  ‚Ä¢ {cidade}: {count} registros")
        
except Exception as e:
    print(f"Erro: {e}")