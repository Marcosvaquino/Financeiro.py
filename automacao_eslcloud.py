"""
Automa√ß√£o ESL Cloud - Relat√≥rio Contas a Receber
Desenvolvido para extrair relat√≥rios automaticamente do sistema ESL Cloud
"""

import os
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from datetime import datetime
from dotenv import load_dotenv

# Importa o webdriver-manager para instala√ß√£o autom√°tica do ChromeDriver
try:
    from webdriver_manager.chrome import ChromeDriverManager
    WEBDRIVER_MANAGER_AVAILABLE = True
except ImportError:
    WEBDRIVER_MANAGER_AVAILABLE = False
    print("‚ö†Ô∏è  webdriver-manager n√£o instalado. Instale com: pip install webdriver-manager")

# Carrega vari√°veis de ambiente do arquivo .env
load_dotenv()


class ESLCloudAutomation:
    """Classe para automa√ß√£o do sistema ESL Cloud"""
    
    def __init__(self, download_path=None):
        """
        Inicializa a automa√ß√£o
        
        Args:
            download_path: Caminho onde os arquivos ser√£o baixados (padr√£o: pasta Downloads)
        """
        self.url = "https://friozer.eslcloud.com.br/users/sign_in"
        self.email = os.getenv('ESL_EMAIL')
        self.senha = os.getenv('ESL_SENHA')
        
        # Define pasta de download
        if download_path is None:
            self.download_path = os.path.join(os.path.expanduser('~'), 'Downloads')
        else:
            self.download_path = download_path
            
        self.driver = None
        
    def configurar_navegador(self):
        """Configura o Chrome com op√ß√µes de download autom√°tico"""
        chrome_options = Options()
        
        # Configura√ß√µes de download
        prefs = {
            "download.default_directory": self.download_path,
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": True,
            "profile.default_content_setting_values.automatic_downloads": 1
        }
        chrome_options.add_experimental_option("prefs", prefs)
        
        # Descomenta a linha abaixo para rodar sem abrir janela do navegador
        # chrome_options.add_argument('--headless')
        
        # Inicia o navegador
        if WEBDRIVER_MANAGER_AVAILABLE:
            # Usa webdriver-manager para instalar automaticamente
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
        else:
            # Usa o ChromeDriver do PATH ou pasta local
            self.driver = webdriver.Chrome(options=chrome_options)
        
        self.driver.maximize_window()
        
        print(f"‚úÖ Navegador configurado")
        print(f"üìÅ Arquivos ser√£o salvos em: {self.download_path}")
        
    def fazer_login(self):
        """Realiza o login no sistema"""
        try:
            print("\nüîê Realizando login...")
            self.driver.get(self.url)
            
            # Aguarda a p√°gina carregar
            wait = WebDriverWait(self.driver, 15)
            
            # Preenche email
            email_field = wait.until(
                EC.presence_of_element_located((By.NAME, "user[email]"))
            )
            email_field.clear()
            email_field.send_keys(self.email)
            print(f"   ‚úì Email preenchido")
            
            # Preenche senha
            senha_field = self.driver.find_element(By.NAME, "user[password]")
            senha_field.clear()
            senha_field.send_keys(self.senha)
            print(f"   ‚úì Senha preenchida")
            
            # Pressiona ENTER para fazer login
            senha_field.send_keys(Keys.RETURN)
            print(f"   ‚úì Enter pressionado para login")
            
            # Aguarda redirecionamento
            time.sleep(5)
            
            print("‚úÖ Login realizado com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao fazer login: {str(e)}")
            return False
    
    def acessar_modulo_financeiro(self):
        """Acessa o m√≥dulo Financeiro atrav√©s do menu ESL Cloud"""
        try:
            print("\nüí∞ Acessando m√≥dulo Financeiro...")
            wait = WebDriverWait(self.driver, 15)
            
            # Aguarda a p√°gina carregar completamente
            time.sleep(3)
            
            # Clica na setinha do dropdown ESL Cloud
            try:
                # Procura pelo elemento que cont√©m "esl" e tem a classe dropdown ou similar
                dropdown = wait.until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, ".dropdown-toggle, button.dropdown-toggle, [data-toggle='dropdown']"))
                )
                dropdown.click()
                print("   ‚úì Dropdown ESL Cloud aberto")
            except:
                # Tenta pelo XPath mais espec√≠fico
                try:
                    dropdown = wait.until(
                        EC.element_to_be_clickable((By.XPATH, "//button[contains(@class, 'dropdown') or @data-toggle='dropdown']"))
                    )
                    dropdown.click()
                    print("   ‚úì Dropdown ESL Cloud aberto (m√©todo 2)")
                except:
                    # √öltima tentativa: clica em qualquer elemento que contenha "Cloud" e seja clic√°vel
                    dropdown = wait.until(
                        EC.element_to_be_clickable((By.XPATH, "//*[contains(text(), 'Cloud')]/.."))
                    )
                    dropdown.click()
                    print("   ‚úì Dropdown ESL Cloud aberto (m√©todo 3)")
            
            time.sleep(2)
            
            # Clica em Financeiro no dropdown
            financeiro = wait.until(
                EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'Financeiro')]"))
            )
            financeiro.click()
            print("   ‚úì M√≥dulo Financeiro acessado")
            time.sleep(3)
            
            print("‚úÖ M√≥dulo Financeiro aberto!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao acessar m√≥dulo Financeiro: {str(e)}")
            # Tenta imprimir o HTML para debug
            try:
                print(f"   üîç URL atual: {self.driver.current_url}")
            except:
                pass
            return False
    
    def acessar_contas_a_receber(self):
        """Acessa o relat√≥rio de Contas a Receber"""
        try:
            print("\nüìä Acessando Contas a Receber...")
            wait = WebDriverWait(self.driver, 15)
            
            # Clica em Relat√≥rios no menu superior
            relatorios = wait.until(
                EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'Relat√≥rios')]"))
            )
            relatorios.click()
            print("   ‚úì Menu Relat√≥rios aberto")
            time.sleep(3)
            
            # Aguarda o dropdown aparecer e tenta diferentes seletores para Contas a Receber
            try:
                # Tenta pelo texto "Contas a Receber"
                contas_receber = wait.until(
                    EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'Contas a Receber')]"))
                )
                contas_receber.click()
                print("   ‚úì Contas a Receber acessado (m√©todo 1)")
            except:
                try:
                    # Tenta pelo href que pode conter 'credits' ou 'contas'
                    contas_receber = wait.until(
                        EC.element_to_be_clickable((By.XPATH, "//a[contains(@href, 'credits') or contains(@href, 'receber')]"))
                    )
                    contas_receber.click()
                    print("   ‚úì Contas a Receber acessado (m√©todo 2)")
                except:
                    # Tenta clicar diretamente na URL
                    print("   ‚ö† Tentando acessar diretamente pela URL...")
                    self.driver.get("https://friozer.eslcloud.com.br/report/accounting/credits")
                    print("   ‚úì URL acessada diretamente")
            
            time.sleep(3)
            
            print("‚úÖ Relat√≥rio de Contas a Receber aberto!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao acessar Contas a Receber: {str(e)}")
            # Debug
            try:
                print(f"   üîç URL atual: {self.driver.current_url}")
            except:
                pass
            return False
    
    def configurar_filtros(self, data_inicio="01/01/2025", data_fim="31/12/2025"):
        """
        Configura os filtros do relat√≥rio
        
        Args:
            data_inicio: Data inicial no formato DD/MM/YYYY
            data_fim: Data final no formato DD/MM/YYYY
        """
        try:
            print("\n‚öôÔ∏è Configurando filtros...")
            wait = WebDriverWait(self.driver, 15)
            
            # Aguarda a p√°gina carregar
            time.sleep(3)
            
            # Limpa campo Filial (remove qualquer filtro selecionado)
            try:
                # Procura pelo X de remo√ß√£o no campo filial
                remover_filial = self.driver.find_elements(
                    By.XPATH, 
                    "//span[contains(@class, 'select2-selection__choice__remove')]"
                )
                if remover_filial:
                    for btn in remover_filial:
                        try:
                            btn.click()
                            time.sleep(0.5)
                        except:
                            pass
                    print("   ‚úì Campo Filial limpo")
                else:
                    print("   ‚Ñπ Campo Filial j√° est√° vazio")
            except:
                print("   ‚Ñπ Campo Filial n√£o precisa ser limpo")
            
            # Preenche data de Emiss√£o - tenta diferentes nomes de campo
            try:
                # Tenta primeiro por name="emission_date"
                campo_emissao = wait.until(
                    EC.presence_of_element_located((By.NAME, "emission_date"))
                )
                print("   ‚úì Campo de emiss√£o encontrado (name)")
            except:
                try:
                    # Tenta por ID
                    campo_emissao = wait.until(
                        EC.presence_of_element_located((By.ID, "emission_date"))
                    )
                    print("   ‚úì Campo de emiss√£o encontrado (id)")
                except:
                    # Tenta por placeholder
                    campo_emissao = wait.until(
                        EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'Emiss√£o') or contains(@placeholder, 'Data')]"))
                    )
                    print("   ‚úì Campo de emiss√£o encontrado (placeholder)")
            
            # Limpa e preenche a data
            self.driver.execute_script("arguments[0].value = '';", campo_emissao)
            campo_emissao.clear()
            campo_emissao.send_keys(f"{data_inicio} - {data_fim}")
            print(f"   ‚úì Per√≠odo configurado: {data_inicio} - {data_fim}")
            
            time.sleep(1)
            
            print("‚úÖ Filtros configurados!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao configurar filtros: {str(e)}")
            print(f"   üîç Tentando continuar mesmo assim...")
            return True  # Continua mesmo com erro nos filtros
    
    def buscar_e_exportar(self):
        """Clica na lupa para buscar e depois no √≠cone Excel para exportar"""
        try:
            print("\nüîç Buscando dados...")
            wait = WebDriverWait(self.driver, 15)
            
            # Clica na lupa (bot√£o de buscar)
            botao_buscar = wait.until(
                EC.element_to_be_clickable((By.XPATH, "//button[@type='submit' or contains(@class, 'btn-primary')]"))
            )
            botao_buscar.click()
            print("   ‚úì Busca iniciada")
            
            # Aguarda carregar os resultados
            time.sleep(3)
            
            print("\nüì• Exportando para Excel...")
            
            # Clica no √≠cone Excel
            botao_excel = wait.until(
                EC.element_to_be_clickable((By.XPATH, "//i[contains(@class, 'fa-file-excel') or contains(@class, 'excel')]"))
            )
            botao_excel.click()
            print("   ‚úì Solicita√ß√£o de exporta√ß√£o enviada")
            
            # Aguarda o modal de confirma√ß√£o aparecer
            time.sleep(2)
            
            print("‚úÖ Exporta√ß√£o solicitada!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar/exportar: {str(e)}")
            return False
    
    def confirmar_download(self):
        """Aguarda e clica no modal de confirma√ß√£o do download"""
        try:
            print("\n‚è≥ Aguardando processamento do relat√≥rio...")
            wait = WebDriverWait(self.driver, 60)  # 60 segundos de timeout
            
            # Aguarda um pouco para o processamento come√ßar
            time.sleep(5)
            
            # Estrat√©gia 1: Clicar no sino de notifica√ß√µes
            try:
                print("   üîî Clicando no sino de notifica√ß√µes...")
                
                # Procura pelo √≠cone do sino (geralmente √© um <i> com classe fa-bell ou similar)
                sino = wait.until(
                    EC.element_to_be_clickable((By.XPATH, "//i[contains(@class, 'bell') or contains(@class, 'fa-bell')] | //a[contains(@class, 'notification')] | //*[@class='notifications']"))
                )
                sino.click()
                print("   ‚úì Sino clicado, aguardando notifica√ß√£o aparecer...")
                time.sleep(3)
                
                # Procura pela primeira notifica√ß√£o (o relat√≥rio gerado)
                print("   üîç Procurando notifica√ß√£o do relat√≥rio...")
                
                # Aguarda a notifica√ß√£o aparecer na lista
                notificacao = wait.until(
                    EC.element_to_be_clickable((By.XPATH, "//div[contains(@class, 'notification')]//a[1] | //ul[contains(@class, 'notification')]//li[1]//a | //div[contains(@class, 'dropdown-menu')]//a[1]"))
                )
                notificacao.click()
                print("   ‚úì Primeira notifica√ß√£o clicada (download iniciado)")
                
                # Aguarda o download iniciar
                time.sleep(5)
                
                print("‚úÖ Download iniciado com sucesso!")
                return True
                
            except Exception as e1:
                print(f"   ‚ö† M√©todo do sino falhou: {str(e1)}")
                print("   üîÑ Tentando m√©todo alternativo (modal)...")
                
                # Estrat√©gia 2: Modal tradicional (fallback)
                try:
                    # Aguarda o modal "Relat√≥rios CSV" aparecer
                    modal_csv = wait.until(
                        EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'Relat√≥rios CSV') or contains(text(), 'relat√≥rio em formato csv')]"))
                    )
                    print("   ‚úì Modal 'Relat√≥rios CSV' detectado!")
                    time.sleep(2)
                    
                    # Procura pelo link "Clique aqui"
                    link_download = wait.until(
                        EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'Clique aqui') or contains(text(), 'aqui')]"))
                    )
                    link_download.click()
                    print("   ‚úì Link 'Clique aqui' clicado")
                    
                    time.sleep(5)
                    print("‚úÖ Download iniciado com sucesso!")
                    return True
                    
                except Exception as e2:
                    print(f"   ‚ùå M√©todo do modal tamb√©m falhou: {str(e2)}")
                    return False
            
        except TimeoutException:
            print("‚ùå Timeout: Nenhuma notifica√ß√£o apareceu em 60 segundos")
            print("   ‚Ñπ Verifique se o relat√≥rio foi gerado no sistema")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao confirmar download: {str(e)}")
            return False
    
    def executar(self, data_inicio="01/01/2025", data_fim="31/12/2025"):
        """
        Executa todo o fluxo de automa√ß√£o
        
        Args:
            data_inicio: Data inicial do relat√≥rio (DD/MM/YYYY)
            data_fim: Data final do relat√≥rio (DD/MM/YYYY)
        """
        try:
            print("="*60)
            print("ü§ñ AUTOMA√á√ÉO ESL CLOUD - CONTAS A RECEBER")
            print("="*60)
            
            # Verifica credenciais
            if not self.email or not self.senha:
                print("‚ùå ERRO: Credenciais n√£o configuradas!")
                print("   Configure o arquivo .env com ESL_EMAIL e ESL_SENHA")
                return False
            
            # Inicia processo
            self.configurar_navegador()
            
            if not self.fazer_login():
                return False
            
            if not self.acessar_modulo_financeiro():
                return False
            
            if not self.acessar_contas_a_receber():
                return False
            
            if not self.configurar_filtros(data_inicio, data_fim):
                return False
            
            if not self.buscar_e_exportar():
                return False
            
            if not self.confirmar_download():
                return False
            
            print("\n" + "="*60)
            print("‚úÖ AUTOMA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("="*60)
            print(f"\nüìÅ Arquivo salvo em: {self.download_path}")
            
            # Aguarda um pouco antes de fechar
            time.sleep(3)
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå ERRO GERAL: {str(e)}")
            return False
            
        finally:
            if self.driver:
                print("\nüîí Fechando navegador...")
                self.driver.quit()


def main():
    """Fun√ß√£o principal"""
    # Cria inst√¢ncia da automa√ß√£o
    automacao = ESLCloudAutomation()
    
    # Executa com per√≠odo de todo o ano de 2025
    automacao.executar(
        data_inicio="01/01/2025",
        data_fim="31/12/2025"
    )


if __name__ == "__main__":
    main()
